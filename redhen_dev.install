<?php

/**
 * @file
 *
 */

module_load_include('inc', 'devel_generate');

/**
 * Implements hook_install().
 */
function redhen_dev_install() {
  include_once DRUPAL_ROOT . '/profiles/minimal/minimal.install';

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'poultry')
    ->execute();
  variable_set('admin_theme', 'poultry');
  variable_set('theme_default', 'poultry');
  variable_set('node_admin_theme', '1');

  minimal_install();

  // misc variables
  variable_set('redhen_contact_connect_users', TRUE);

  //create Note type terms
  redhen_dev_create_note_type_terms();

  // create base types
  redhen_create_type('redhen_contact_type', 'Staff', 'staff');
  redhen_create_type('redhen_contact_type', 'Management', 'management');
  redhen_create_type('redhen_org_type', 'Shelter', 'shelter');
  redhen_create_type('redhen_org_type', 'Foundation', 'foundation');
  redhen_create_type('redhen_org_type', 'Business', 'business');
  redhen_create_type('redhen_org_type', 'Group', 'group', array('data' => array(
    'group' => 1,
    'group_settings' => array(
      'private' => 1,
      'content_types' => array('post' => 'post')
    )
  )));

  // clear caches before creating test data
  drupal_flush_all_caches();

  // create some organizations
  redhen_dev_create_orgs();

  // create some contacts
  redhen_dev_create_contacts(array('staff', 'management'));

  // membership setup
  redhen_dev_membership_setup();

  // setup registrations
  redhen_dev_registration_setup();

  // setup some enagagement scores
  redhen_dev_engagement_scores();

  // needed because groups use node_access system
  node_access_rebuild(TRUE);

  // salesforce setup
  redhen_dev_salesforce_setup();
}

/**
 * Helper to create contacts
 *
 * @param $bundles
 *   Random bundle will be chosen
 *
 * @param int $number
 */
function redhen_dev_create_contacts($bundles, $number = 100) {
  for($i=0; $i<$number; $i++) {
    $bundle = $bundles[mt_rand(0, count($bundles)-1)];
    $first_name = random_data_first_name();
    $contact = new RedhenContact(array(
      'type' => $bundle,
      'first_name' => $first_name,
      'middle_name' => $i % 2 ? '' : random_data_first_name(),
      'last_name' => random_data_last_name()
    ));
    $contact->setEmail(
      strtolower($first_name) . '@' . devel_generate_word(mt_rand(5, 20)) . '.com'
    );
    $contact->save();
    if ($i >= 0 and $i <10) {
      $note = new RedhenNote(array(
        'type' => 'redhen_note',
        'entity_type' => 'redhen_contact',
        'entity_id' => $contact->contact_id,
        'author_uid' => 1,
      ));
      $note->redhen_note_body[LANGUAGE_NONE][0]['value'] = devel_generate_word(mt_rand(5, 20));
      $note->redhen_note_type[LANGUAGE_NONE][0]['tid'] = rand(1,2);
      $note->save();
    }
  }
}

/**
 * Helper to create orgs
 *
 * @param $bundles
 *   Random bundle will be chosen
 *
 * @param int $number
 */
function redhen_dev_create_orgs() {
  foreach (random_data_get_all_orgs() as $organization) {
    $bundle = $organization['type'];
    if ($bundle == 'foundation' || $bundle == 'shelter') {
      $org = new RedhenOrg(array(
        'type' => $bundle,
        'label' => $organization['name'],
      ));
      $org->save();
      $note = new RedhenNote(array(
        'type' => 'redhen_note',
        'entity_type' => 'redhen_org',
        'entity_id' => $org->org_id,
        'author_uid' => 1,
      ));
      $note->redhen_note_body[LANGUAGE_NONE][0]['value'] = devel_generate_word(mt_rand(5, 20));
      $note->redhen_note_type[LANGUAGE_NONE][0]['tid'] = rand(1,3);
      $note->save();
    }
  }
}

/**
 * Create a simple bundle/type
 *
 * @param $type
 * @param $label
 * @param $bundle
 * @param array $values
 */
function redhen_create_type($type, $label, $bundle, $values = array()) {
  $contact_type = entity_create($type, $values);
  $contact_type->label = $label;
  $contact_type->name = $bundle;
  $contact_type->save();
}

/*
 * Create note type terms
 */
function redhen_dev_create_note_type_terms() {
  $note_type_taxonomy = taxonomy_vocabulary_machine_name_load('note_type');

  $terms = array('Phone call', 'Email', 'Letter', 'Conversation');

  foreach ($terms as $termname) {
    $term = new stdClass();
    $term->name = $termname;
    $term->vid = $note_type_taxonomy->vid;
    taxonomy_term_save($term);
  }
}

/**
 * Setup redhen registration stuff.
 */
function redhen_dev_registration_setup() {
  registration_type_save(new RegistrationType(array(
    'name' => 'registration_type_1',
    'label' => 'Registration Type 1'
  )));

  // create event content type
  $types = array(
    array(
      'type' => 'event',
      'name' => st('Event'),
      'base' => 'node_content',
      'description' => st("An event that you can register for."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'post',
      'name' => st('Post'),
      'base' => 'node_content',
      'description' => st("Content posted into a group."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  field_create_field(array(
    'field_name' => 'field_registration',
    'type' => 'registration'
  ));

  field_create_instance(array(
    'field_name' => 'field_registration',
    'entity_type' => 'node',
    'bundle' => 'event',
    'label' => 'Registration'
  ));

  $node = new stdClass();
  $node->type = 'event';
  node_object_prepare($node);
  $node->title = 'Test Event';
  $node->body = devel_create_content();
  $node->uid = 1;
  $node->field_registration[LANGUAGE_NONE][0]['registration_type'] = 'registration_type_1';
  node_save($node);

  $settings = array(
    'status' => TRUE,
    'capacity' => 0,
    'send_reminder' => 0,
    'settings' => serialize(array(
      'from_address' => 'info@thinkshout.com'
    )),
    'open' => NULL,
    'close' => NULL,
  );
  registration_update_entity_settings('node', $node->nid, $settings);
}

/**
 * Setup membership types and roles
 */
function redhen_dev_membership_setup() {
  $role_name = 'Premium';
  $role = new stdClass();
  $role->name = $role_name;
  user_role_save($role);
  $premium_role_id = user_role_load_by_name($role_name)->rid;

  // create some membership types
  $membership_type = entity_create('redhen_membership_type', array());
  $membership_type->label = 'Standard';
  $membership_type->name = 'standard';
  $membership_type->save();

  $membership_type = entity_create('redhen_membership_type', array());
  $membership_type->label = 'Premium';
  $membership_type->name = 'premium';
  $membership_type->role_id = $premium_role_id;
  $membership_type->save();
}

/**
 * Setup some engagement scores.
 */
function redhen_dev_engagement_scores() {
  $score = new RedhenEngagementScore(array(
    'label' => 'Engagement Score 1',
    'score' => 10,
    'name' => 'engagement_score_1'
  ));
  $score->save();

  $score = new RedhenEngagementScore(array(
    'label' => 'Engagement Score 2',
    'score' => 5,
    'name' => 'engagement_score_2'
  ));
  $score->save();

  for ($i=1; $i<100; $i++) {
    $contact_id = mt_rand(1, 100);
    $engagement = redhen_engagement_create('engagement_score_' . mt_rand(1,2), $contact_id, devel_generate_word(mt_rand(10,30)));
    redhen_engagement_save($engagement);
  }
}

/**
 * Salesforce setup.
 */
function redhen_dev_salesforce_setup() {
  variable_set('salesforce_consumer_key', '3MVG9yZ.WNe6byQC3METjuPMZE3WAccPtT7ythFkEY3D8OlaRg7HmDL98zACwJBX7iYP9AGNpuzD2rHt0RAoD');
  variable_set('salesforce_consumer_secret', '7241637589953999446');
}

/**
 * Helper function for pulling a random first name
 */
function random_data_first_name() {

  $first_names = array(
    'Sean',
    'Lev',
    'Andrea',
    'Tauno',
    'Brandon',
    'John',
    'Jonathan',
    'Grant',
    'Lee',
    'Steve',
    'Stephen',
    'Chris',
    'Christian',
    'Jill',
    'Julie',
    'Jane',
    'Jack',
    'Jasmine',
    'Sally',
    'Kerry',
    'Susanne',
    'Susan',
    'Linda',
    'LouAnn',
    'Richard',
    'Eric',
    'Erik',
    'Edwin',
    'Edward',
    'Liz',
    'Elizabeth',
    'Anna',
    'Anne',
    'Alan',
    'Alexandra',
    'Alex',
    'Thomas',
    'Tony',
    'Paul',
    'Pauline',
    'Tim',
    'Timothy',
    'Zack',
    'Jed',
    'Kelly',
    'Kyle',
    'Pam',
    'Pat',
    'Patrick',
    'Patricia',
    'Robert',
    'Roberto',
    'Albert',
    'Alberto',
    'Lander',
    'Wolfe',
    'Skip',
    'Miles',
    'Johnny',
    'Stewart',
    'Katherine',
    'Catherine',
    'Annie',
    'Brian',
    'Hans',
    'Janet',
    'T.J.',
    'Kristin',
    'Margaux',
    'Erin',
    'Jeffery',
    'Alyssa',
    'Alisa',
    'Alexis',
    'Bill',
    'Jake',
    'Katie',
    'Jay',
    'Matt',
    'Matthew',
    'Will',
    'Bri',
    'Cindy',
    'Melissa',
    'Adam',
    'Tess',
    'Skip',
    'Sky',
    'Holly',
    'Kris',
    'Nicole',
    'Jason',
    'Dax',
    'Jordan',
    'Heather',
    'Laura',
    'Rob',
    'Drew',
    'Andrew',
    'Grant',
    'Nate',
    'Nathen',
    'Khari',
    'Rich',
    'Fletcher',
    'Mason',
    'Sheena',
    'Turin',
    'Sallie',
    'Elisa',
    'Dorinda',
    'Pace',
    'Sandra',
    'Maria',
    'Myra',
    'Krista',
    'David',
    'Greg',
    'Gregg',
    'Edric',
    'Lisa',
    'Mary Beth',
    'Michelle',
    'Flynn',
    'Heidi',
    'Lauren',
    'Cyrus',
    'Josie',
    'Jan',
    'Julia',
    'Nikki',
    'Cody',
    'Dana',
    'Earl',
    'Emily',
    'Sun',
    'Milo',
    'Blaise',
    'Erica',
    'Jewel',
    'Corey',
    'Walter',
    'Justin',
    'Randall',
    'Chandra',
    'Amanda',
    'Chad',
    'Wilson',
    'Luther',
    'Moira',
    'Damien',
    'Kelly',
    'Shannon',
    'Marlene',
    'Kevin',
    'Richard',
    'Art',
    'Amye',
    'Anthony',
    'Amy',
    'A.J.',
    'Fred',
    'Felipe',
    'Karen',
    'Carl',
    'Karl',
    'Sarah',
    'Sara',
    'Shawn',
    'Mary',
    'Mark',
    'Josh',
    'Peter',
    'Kristina',
    'Christine',
    'Jesse',
    'Becky',
    'Bob',
    'Peggy',
    'Silus',
    'River',
    'Mark',
    'Marcus',
    'Jim',
    'Terry',
    'Lupine',
    'Charles',
    'Betty',
    'Joe',
    'Stacy',
    'Stacey',
    'Stiv',
    'Jamie',
    'Lewis',
    'Carol',
    'Jeremy',
    'Scott',
    'Mike',
    'Phillips',
  );

  $name = array_rand($first_names, 1);
  return $first_names[$name];

}

/**
 * Helper function for pulling a random first name
 */
function random_data_last_name() {

  $last_names = array(
    'French',
    'King',
    'Stockton',
    'Mitchell',
    'Oakland',
    'Jackson',
    'Toledo',
    'White',
    'Bane',
    'Zane',
    'Larkin',
    'Tsypin',
    'Burton',
    'Hogue',
    'Lee',
    'Parker',
    'Taylor',
    'Moore',
    'Stetson',
    'Peterbuilt',
    'Cruise',
    'Jonze',
    'Fey',
    'Patel',
    'Ryan',
    'Doe',
    'Lawson',
    'Dawson',
    'Grant',
    'Cooper',
    'Anderson',
    'Andersen',
    'Bishop',
    'Regan',
    'Hupp',
    'Stevens',
    'Stevenson',
    'Santana',
    'Santiago',
    'Barber',
    'Smith',
    'Davison',
    'O\'Reilly',
    'O\'Neil',
    'Givingsworth',
    'Peters',
    'Peterson',
    'Stratton',
    'Huckley',
    'Earhart',
    'Hudson',
    'Scott',
    'Lemon',
    'Michaels',
    'Angelo',
    'Frost',
    'Turner',
    'Maxwell',
    'Clinton',
    'Wonder',
    'Quinn',
    'Bridges',
    'Madison',
    'Jacob',
    'Simone',
    'Simon',
    'Eustis',
    'Simpson',
    'Eagle',
    'Hoffman',
    'Lichten',
    'Winston',
    'Bowers',
    'Cook',
    'Bethea',
    'Eckberg',
    'Arnold',
    'Bowron',
    'Born',
    'Ingle',
    'Backer',
    'Savage',
    'Robinson',
    'Merlin',
    'Spencer',
    'Byrne',
    'Cahill',
    'Ernst',
    'Hatfield',
    'Boil',
    'Kern',
    'Fish',
    'Lincoln',
    'Nash',
    'Duke',
    'Shipman',
    'Baird',
    'McNaughty',
    'Butcher',
    'Meyers',
    'Heckman',
    'Cort',
    'Woods',
    'Son',
    'Hammer',
    'Goodman',
    'Loveless',
    'Sharp',
    'Tompkins',
    'Lewis',
    'Wild',
    'Griffin',
    'Griggs',
    'Rogers',
    'Roberts',
    'Irvington',
    'Odefey',
    'Michels',
    'Kroman',
    'Evans',
    'Yaggi',
    'Sanderson',
    'Jobs',
    'McQueen',
    'Sanders',
    'Rodrigo',
    'Rodgers',
    'Robertson',
    'Tyler',
  );

  $name = array_rand($last_names, 1);
  return $last_names[$name];
}

/**
 * Helper function for pulling random organizations.
 */
function random_data_organization() {

  $organizations = random_data_get_all_orgs();
  $org = array_rand($organizations, 1);
  return $organizations[$org];
}

/**
 * Helper function for getting an array of organizations.
 */
function random_data_get_all_orgs() {

  $organizations = array(
    array('type' => 'shelter', 'domain' => 'org', 'name' => 'Lucky Critters Shelter'),
    array('type' => 'shelter', 'domain' => 'org', 'name' => 'Rose City Squirrel Shelter'),
    array('type' => 'shelter', 'domain' => 'org', 'name' => 'A Horse is a Horse Of Course Adoptions'),
    array('type' => 'foundation', 'domain' => 'org', 'name' => 'Oregon Foundation for Animal Shelters'),
    array('type' => 'foundation', 'domain' => 'org', 'name' => 'NYC Cares About Pets'),
    array('type' => 'shelter', 'domain' => 'org', 'name' => 'Fish Have Feelings Too'),
    array('type' => 'foundation', 'domain' => 'org', 'name' => 'Society for the Ethical Treatment of Clams'),
    array('type' => 'shelter', 'domain' => 'org', 'name' => 'Crouching Tigers Need a Home'),
    array('type' => 'foundation', 'domain' => 'org', 'name' => 'Cat People Care'),
    array('type' => 'shelter', 'domain' => 'org', 'name' => 'Bark If You Love Cats'),
    array('type' => 'business', 'domain' => 'com', 'name' => 'Beautiful Pets'),
    array('type' => 'business', 'domain' => 'com', 'name' => 'One Fish Two Fish'),
    array('type' => 'business', 'domain' => 'com', 'name' => 'Pet Supplies Are Us'),
  );

  return $organizations;
}
